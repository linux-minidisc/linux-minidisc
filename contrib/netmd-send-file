#!/usr/bin/env python3
#
# netmd-send-file: Wrapper to send any file supported by ffmpeg to a NetMD device
# 2022-05-03 Thomas Perl <m@thp.io>
#
# Uses ffmpeg and atracdenc, similar to what Platinum MD and
# netmd-js are doing to send PCM (for SP) or ATRAC3 (for LP2/LP4).
#
# Can also use the atrac3.acm Windows codec via atracenc + wine.
#

import argparse
import subprocess
import tempfile
import os
import struct

parser = argparse.ArgumentParser(description='Send audio files to a NetMD recorder, with conversion')
parser.add_argument('filename', nargs='+', type=str, help='Audio file to send to the player')
parser.add_argument('--format', default='sp', type=str, help='Format to send over (sp, lp2, lp4)')
parser.add_argument('--use-sony-atrac3', action='store_true', help='Use atrac3.acm from Sony instead of atracdenc')

HERE = os.path.dirname(__file__) or '.'

# Paths to the tools may need to be adjusted
NETMDCLI = os.path.join(HERE, '../build/netmdcli')
FFMPEG = 'ffmpeg'
ATRACDENC = os.path.join(HERE, '../../atracdenc/build/src/atracdenc')
ATRACENC = os.path.join(HERE, 'atracenc/atracenc.exe')

args = parser.parse_args()

if args.format not in ('sp', 'lp2', 'lp4'):
    raise ValueError(f'Invalid format: {args.format}, only sp, lp2 and lp4 are supported')


for filename in args.filename:
    basename = os.path.basename(filename)

    # TODO: Could read title from tags
    title, _ = os.path.splitext(basename)

    temp_filename = tempfile.mktemp('.wav')

    subprocess.check_call([FFMPEG,
        '-i', filename,
        '-ar', '44100',
        '-ac', '2',
        '-c:a', 'pcm_s16le',
        temp_filename])

    if args.format != 'sp':
        temp_atrac_filename = tempfile.mktemp('.oma')

        if args.use_sony_atrac3:
            # ATRACENC supports reading/writing to the same file
            subprocess.check_call(['wine', ATRACENC, args.format, temp_filename, temp_filename])
        else:
            subprocess.check_call([ATRACDENC,
                '-e', 'atrac3',
                '--bitrate', {'lp2': '128', 'lp4': '64'}[args.format],
                '-i', temp_filename,
                '-o', temp_atrac_filename])

            # Use ffmpeg to put OMA -> WAV
            subprocess.check_call([FFMPEG, '-y', '-i', temp_atrac_filename, '-c:a', 'copy', temp_filename])

            os.unlink(temp_atrac_filename)

    subprocess.check_call([NETMDCLI, '-v', 'send', temp_filename, title])

    os.unlink(temp_filename)

    subprocess.check_call([NETMDCLI, 'discinfo'])
